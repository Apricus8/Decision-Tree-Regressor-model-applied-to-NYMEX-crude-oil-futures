import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score, mean_squared_log_error, explained_variance_score
from sklearn.model_selection import TimeSeriesSplit

# Load the data
data = pd.read_csv('https://www.quandl.com/api/v3/datasets/CHRIS/CME_CL1.csv?start_date=2010-01-01&end_date=2023-12-31')

# Extract the date and closing prices
data['Date'] = pd.to_datetime(data['Date'])
data.set_index('Date', inplace=True)
closing_prices = data['Settle']

# Normalize the closing prices between 0 and 1
scaler = MinMaxScaler()
normalized_prices = scaler.fit_transform(closing_prices.values.reshape(-1, 1))

# Function to create a dataset for training and testing
def create_dataset(data, window_size):
    X, y = [], []
    for i in range(len(data) - window_size):
        X.append(data[i:i+window_size])
        y.append(data[i+window_size])
    return np.array(X), np.array(y)

# Set the window size for the time series data
window_size = 30

# Define the walk-forward cross-validation with purging and embargo
tscv = TimeSeriesSplit(n_splits=5)
rmse_scores = []
mae_scores = []
r2_scores = []
msle_scores = []
mpe_scores = []
mape_scores = []
ev_scores = []

# Create an empty figure
fig, ax = plt.subplots(figsize=(10, 6))

# Select one fold for visualization
fold_num = 0

for train_index, test_index in tscv.split(normalized_prices):
    # Apply purging and embargo
    train_data = normalized_prices[train_index]
    test_data = normalized_prices[test_index]

    if fold_num == 0:
        # Create the training dataset
        X_train, y_train = create_dataset(train_data, window_size)

        # Flatten the X_train array
        X_train = X_train.reshape(X_train.shape[0], -1)

        # Create the testing dataset
        X_test, y_test = create_dataset(test_data, window_size)

        # Reshape the X_test array
        X_test = X_test.reshape(X_test.shape[0], -1)

        # Create and train the Decision Tree model
        model = DecisionTreeRegressor()
        model.fit(X_train, y_train.ravel())

        # Make predictions on the testing dataset
        y_pred = model.predict(X_test)

        # Denormalize the predicted and actual closing prices
        y_pred_denormalized = scaler.inverse_transform(y_pred.reshape(-1, 1))
        y_test_denormalized = scaler.inverse_transform(y_test.reshape(-1, 1))

        # Calculate evaluation metrics
        rmse = np.sqrt(mean_squared_error(y_test_denormalized, y_pred_denormalized))
        mae = mean_absolute_error(y_test_denormalized, y_pred_denormalized)
        r2 = r2_score(y_test_denormalized, y_pred_denormalized)
        msle = mean_squared_log_error(y_test_denormalized, y_pred_denormalized)
        mpe = np.mean((y_test_denormalized - y_pred_denormalized) / y_test_denormalized) * 100
        mape = np.mean(np.abs((y_test_denormalized - y_pred_denormalized) / y_test_denormalized)) * 100
        ev = explained_variance_score(y_test_denormalized, y_pred_denormalized)

        # Append scores to lists
        rmse_scores.append(rmse)
        mae_scores.append(mae)
        r2_scores.append(r2)
        msle_scores.append(msle)
        mpe_scores.append(mpe)
        mape_scores.append(mape)
        ev_scores.append(ev)

        # Plot the actual and predicted closing prices
        ax.plot(y_test_denormalized, label='Actual')
        ax.plot(y_pred_denormalized, label='Predicted')

        break

# Set the plot labels and title
ax.set_xlabel('Time')
ax.set_ylabel('Closing Price')
ax.set_title('Closing Prices: Actual vs Predicted')
ax.legend()

# Show the plot
plt.show()

# Calculate the average scores across all cross-validation folds
avg_rmse = np.mean(rmse_scores)
avg_mae = np.mean(mae_scores)
avg_r2 = np.mean(r2_scores)
avg_msle = np.mean(msle_scores)
avg_mpe = np.mean(mpe_scores)
avg_mape = np.mean(mape_scores)
avg_ev = np.mean(ev_scores)

# Print the average scores
print('Average RMSE:', avg_rmse)
print('Average MAE:', avg_mae)
print('Average R2:', avg_r2)
print('Average MSLE:', avg_msle)
print('Average MPE:', avg_mpe)
print('Average MAPE:', avg_mape)
print('Average Explained Variance Score:', avg_ev)
